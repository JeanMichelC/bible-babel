* Project Babel-Bible - v1.9
was formerly (till <2013-02-10 dim.>) P2012-002_Marc_exploiter_texte_grec_v1.94.org
** F5 - Log
- 1.7 :: début
- 1.71 :: <2012-12-31 lun.> unification du traitement des marqauage, par universalisation des query-replace-regexp
          reprise du texte de marc non traité
- 1.72 :: <2012-12-31 lun.> création d'un "progn" pour application de tout le traitement jusqu'avant la mise en tableau
- 1.73 :: <2012-12-31 lun.> 1.72 est validé, 1.73 vise à mettre tout dans une structure org avec tableaux
- 1.732 :: <2012-12-31 lun.> ça avance, y compris traitement de la ponctuation
- 1.74 :: <2012-12-31 lun.> OK - la mise en tableau fonctionne
- 1.741 :: <2012-12-31 lun.> - léger bug dans la 1.74, les headers de verset n'i=ont qu'un seul ¤, corrigé dans la 1.741 par deux ¤
- 1.75 :: <2012-12-31 lun.> mise en tableau des headers "verset" - attention, il y a un léger bug dans la 1.74, corrigé dans la 1.741
- 1.751 :: <2013-01-02 mer.> meilleure structuration livre vs chapitres vs intertitres
- 1.8 :: <2013-01-04 ven.> - démarrage de la 1.8 avec traitement "direct"
- 1.81 :: <2013-01-05 sam.> suite
- 1.82 :: <2013-01-06 dim.> mise au point - ok, validé
- 1.83 :: <2013-01-07 lun.> recherche de chiasmes
- 1.84 :: <2013-01-10 jeu.> 1.83 a un bug non trouvé
- 1.85 :: <2013-01-10 jeu.> 1.84 fonctionne, mais les boucles "while /query-replace-regexp plantent en sortie, obligeant à relance l'exécution de la suite du code
- 1.86 :: <2013-01-20 dim.> correction des boucles while qui ne fonctionnent pas, et début d'utilisation d'org-babel - validé sur Mark_1to2 le <2013-01-21 lun. 09:07>
- 1.90 :: <2013-01-21 lun.> réécriture partielle de code pour clarifier, et test sur tout Marc - introduction partielle pour évoluer dans le texte de l'approche "narrow-to-element" ou le element est le tableau "book"
- 1.91 :: <2013-02-02 sam.> normalisation des versets strong et début de présentation de chiasmes
- 1.92 :: <2013-02-02 sam.> suite du 1.91, avec test complet de l'algo du 1.91 - la v1.92 est validée
- 1.93 :: <2013-02-09 sam.> début de refactorisation avec introduction de fonctions



** principes
*** versions 1.7
- abandon de la voie du 1.6 de type "html-to-org" ; en effet, le html est trop malformé ou tout au moins irrégulier
- repérage et marquage préalable des balises contenant l'information
- puis suppression des autres balises
- puis mise en forme

*** versions 1.8
- abandon de la voie 1.7, presqu'aboutie en 1.751, car proche de fonctionner, mais compliquée, et j'ai peur qu'elle soit en O(n²), danc potentiellement impraicable sur des textes longs 
- démarrage de la 1.8 avec traitement "direct"
- traitement de l'info utile à l'avancement du texte
- 1er passage = traitement des chapitres
- 2ème passage = traitement des intertitres
- 3ème passage = traitement des mots (avec verset éventuellement)


*** versions 1.9
- refactoring de la 1.8, en évoluant vers org-babel
- test sur Marc 1 à 16


** F4e
- potentiellementtrès utile
  http://www.ergoemacs.org/emacs/elisp_idioms.html
  http://www.ergoemacs.org/emacs/elisp_basics.html
- utilisation de replace-match
  http://stackoverflow.com/questions/6395898/emacs-how-do-i-replace-regexp-with-a-lisp-function-in-a-defun
- utilisation de save-excursion et save-restrictions
  http://stackoverflow.com/questions/11596010/what-does-buffers-restrictions-mean-in-save-restriction

#+name: a_quoi_sert_cette_fonction_?_<2013-01-21 lun.>
#+BEGIN_SRC elisp
   (defun put-in-par (str)
     (concat "(" str ")")
   )
   
   (defun upcs-luke ()
     (interactive)
     (goto-char 1)
     (while (search-forward-regexp "(\\([^\\)]+\\))" nil t) 
       (replace-match (put-in-par (upcase (match-string 1))) t nil)))

#+END_SRC

#+RESULTS:
: 1

  
- ou encore
  http://brlcad.org/wiki/Emacs
  #+BEGIN_SRC elisp
    (defun ws2 ()
      "Removes embedded white space (particularly tabs)"
      (interactive)
      (save-excursion
        (goto-char (point-min))
        (while (query-replace-regexp "\\([[:alnum:]_*(\[{@<>+#!\"'-]\\)[    ]*      [       ]*\\([[:alnum:]_*(\[{@<>+#!\"'-][[:alnum:]_*(\[{@<>+#!\"'-]?\\)[         ]+" "\\1 \\2 "))
        (goto-char (point-min))
        (while (query-replace-regexp "\\([[:alnum:]_*(\[{@<>+#!\"'-]\\)[    ]*      [       ]*\\([[:alnum:]_*(\[{@<>+#!\"'-]\\)" "\\1 \\2"))
        (goto-char (point-min))
        (while (query-replace-regexp "\\([[:alnum:]_*(\[{@<>+#!\"'-]\\)[    ]+ +[   ]*\\([[:alnum:]_*(\[{@<>+#!\"'-]\\)" "\\1 \\2"))
        ))
  #+END_SRC


** F5 - idées d'évolution

*** idées pour une v2 ou v3
- en v2 ou v3, ou pourrait traiter les balises comme en v1.75, mais au lieu de faire un post-traitement particulier pour obtenir une structure de type org, basculer à ce moment sur un "html-to-org". En effet, le traitement des balises comme en v1.75 donne un html parfait
  - se renseigner sur "ce qu'est du html" parfait, ou du xhtml ou du xml.
- et faire vraiment du org-babel, en mettant le texte à traiter sous une balise adéquate #+name etc
- et insérer tous les fichiers issus d'interlinear via curl par une boucle (while ... incrémenter_compteur_i .... insert mark_i....)

** known bugs and limitations
- DONE limitation : le côté interactif qui demande quelques confirmations "y" ou plutôt "!" inutiles
- limitation : pas testé sur le texte hébreu
- limitation : les intertitres anglais doivent forcément précéder un mot contenant un verset (du moins je crois, pas testé autrement), sinon, risque de bug (?)
- pour des raisons de contraintes des regexp (pas plus de 9 sub-expressions), on abandonne de l'info, a priori redondante
- bug <2013-01-06 dim.> : il y a des "&#8211;", à remplacer par des tirets "-" et des "&nbsp;" accolés à d'autre caractères, qui trainent dans la colonne "anglais"

** algorithme
*** utility
#+name: toggle_query
#+BEGIN_SRC 
" toggle replace-regexp => query-replace-regexp "
(query-replace-regexp "[^-]replace-regexp" "query-replace-regexp")
#+END_SRC

*** algorithme à exécuter par (org-babel-execute-subtree)
**** pré-traitement intégré des "&nbsp;" et des "&#8212;" et des \n

#+name: pre-treatment
#+BEGIN_SRC elisp :results append
  (progn 
    ;; insertion du fichier à traiter
    (goto-char (point-max))
    (goto-char (search-backward-regexp "<¤ST[A]RT¤>"))
    (next-line)
    (insert-file-contents "~/Téléchargements/interlinear/mark_1to2")

    ;; début du pré-traitement
    (goto-char (point-min))
    (goto-char (search-forward-regexp "13146597465"))
    ;; (query-replace-regexp "query-replace-regexp" "replace-regexp")  ;; attention, permet de passer en mode non-query
    (goto-char (search-forward-regexp "<¤ST[A]RT¤>")) 
    (replace-regexp ">\n\n+<" ">\n<")
    (goto-char (point-max))
    (goto-char (search-backward-regexp "<¤ST[A]RT¤>"))
    (replace-regexp "\\>&nbsp;\\<" " ")
    (goto-char (point-max))
    (goto-char (search-backward-regexp "<¤ST[A]RT¤>"))
    (replace-regexp ">\\(&nbsp;\\)*&#8212;<" ">-<")
    (goto-char (point-min))
    (goto-char (search-forward-regexp "16481231566185")))
#+END_SRC

#+RESULTS: pre-treatment
: 18818
: 18839
: 18856
: 18856
: 6824
: 6824
: 6824
: 6824
: 6824
: 6824

***** DEPRECATED pas à pas pré-traitement détaillé des "&nbsp;" et des "&#8212;" et des \n
- [X] remplacer par un blancs les séquences "&nbsp;" entre deux mots : (query-replace-regexp "\\>&nbsp;\\<" " ")
- [X] remplacer par un tiret les séquences "&#8212;" entre deux balises : (query-replace-regexp ">\\(&nbsp;\\)*&#8212;<" ">-<")
- [X] supprimer les \n : 
      (progn 
          (goto-char (search-forward-regexp "<¤ST[A]RT¤>")) 
          (query-replace-regexp ">\n\n+<" ">\n<")
          (goto-char (search-backward-regexp "46546185")))

**** traitement intégré : chapitres, intertitres, retours à la ligne, indentations, versets, mots 

- [ ] 
#+name: treatment
#+BEGIN_SRC elisp :results append
  (progn 
    (goto-char (search-forward-regexp "<¤ST[A]RT¤>"))
    (replace-regexp "<head><title>\\(.*?\\([1-9][0-9]?\\).*?\\)<.*?</head>" "\n|chapter|\\2||||\\1|\n")
    (goto-char (point-max))
    (goto-char (search-backward-regexp "<¤ST[A]RT¤>"))
    (replace-regexp "<span class=.title.>\\(.*\\)</span>" "\n|title|||||\\1|\n")
    (goto-char (point-max))
    (goto-char (search-backward-regexp "<¤ST[A]RT¤>"))
    (replace-regexp "</td></tr></table><table width=.800. border=.0. cellspacing=.0. cellpadding=.0. align=.center.><tr><td>" "\n|RL||\n")
    (goto-char (point-max))
    (goto-char (search-backward-regexp "<¤ST[A]RT¤>"))
    (replace-regexp "\\(<table class=\"tablefloat\".*?\"middle\"><span class=\"spc.?\">.*?</table>\\)\\(.*\\)$" "\n|indentation||\n\\2")
    (goto-char (point-max))
    (goto-char (search-backward-regexp "<¤ST[A]RT¤>"))
    (replace-regexp "\\(<table class=\"tablefloat\".*?\"middle\".*?>\\).*?\\(<span class=\"pos\">.*?\\)<span class=\"reftrans\">.*?\\(<span class=\"translit\".*?\\)<span class=\"refmain\">\\([1-9][0-9]?\\).*?\\(<span class=\"greek\">.*?\\)<span class=\"refbot\">.*?\\(<span class=\"eng\">.*?\\)<span class=\"reftop2\">.*?\\(<span class=\"strongsnt.*\\)" "\n|verse|\\4|\\1\\2\\3\\5\\6\\7")
    (goto-char (point-max))
    (goto-char (search-backward-regexp "<¤ST[A]RT¤>"))
    (replace-regexp "<table class=\"tablefloat\">.*<span class=\"pos\"><a href=\".*?\" title=\"\\(.*?\\)\">\\([1-9][0-9]?[0-9]?[0-9]?\\)<.*?<span class=\"strongsnt\"><a href=\".*?\" title=\"\\(.*?\\)\">\\[e]<.*?<span class=\"translit\"><a href=\".*?\" title=\"\\(.*?\\)\">\\(.*?\\)<.*?<span class=\"greek\">\\(.*?\\)<.*?<.*?<span class=\"eng\">\\(.*?\\)<.*?<span class=\"strongsnt\"><a href=\".*?\" title=\"\\(.*?\\)\">\\(.*?\\)<.*>$" "\n|word||\\1|\\2|\\3|\\4|\\5|\\6|\\7|\\8|\\9|")
    (goto-char (point-max))
    (goto-char (search-backward-regexp "<¤ST[A]RT¤>"))
    (replace-regexp "|\n+[^|]*\n|" "|\n|")
    (goto-char (point-max))
    (goto-char (search-backward-regexp "<¤ST[A]RT¤>"))
    (replace-regexp "^<html>\n\\(|.*?|.*|\\)\\(.*?\\) 1" "|book|||||\\2\n\\1\\2 1")
    (goto-char (point-min))
    (replace-regexp "^\\(* <¤ST[A]RT¤>[^|]*\\)" "\\1| <4> | <8> | <4> | <4> | <4> | <20> | <10> | <20> | <10> | <35> | <10> |\n")
    (goto-char (point-min))
    (replace-regexp "^\\(* <¤ST[A]RT¤>[^|]*\\)" "\\1#+tblname: book\n|livre | L_C:v |  | NNNN |  |  | translit. | greek | english | grammar | gram. |\n")
    (goto-char (point-min))
    (goto-char (search-forward-regexp "123455461")))
  
  
#+END_SRC

#+RESULTS: treatment
: 21908
: 21937
: 21962
: 21970
: 10112
: 10119
: 10126
: 10150
: 10157
: 10164

***** DEPRECATED <2013-01-06 dim.> traitement pas à pas détaillé : chapitres, intertitres, retours à la ligne, indentations, versets, mots 
****** traitement des chapitres
- xxxxxxxxxxxxxxxxxxxxxxxxxxxx à faire, la question étant : sur combien de colonnes xxxxxxxxxxxxxxxxxx
- [X] (query-replace-regexp "<head><title>\\(.*?\\)<.*?</head>" "\n|\\1||")
****** traitement des intertitres
- xxxxxxxxxxxxxxxxxxxxxxxxxxxx à faire, la question étant : sur combien de colonnes xxxxxxxxxxxxxxxxxx
- [X] (query-replace-regexp "<span class=.title.>\\(.*\\)</span>" "\n|\\1||")


****** traitement des retours à la ligne
- je supppose les retours à la lignes portés par : </td></tr></table><table width="800" border="0" cellspacing="0" cellpadding="0" align="center"><tr><td>

- [X] (query-replace-regexp "</td></tr></table><table width=.800. border=.0. cellspacing=.0. cellpadding=.0. align=.center.><tr><td>" "\n|RL||")

****** traitement des indentations

quand on en est là, regarder si on ne peut pas manger davantage de texte lors de la query-replace-regexp

- [X] (query-replace-regexp "\\(<table class=\"tablefloat\".*?\"middle\"><span class=\"spc.?\">.*?</table>\\)\\(.*\\)$" "\n|indentation||\\2")

  
****** normalisation des mots par traitement des § de mots portant un n° de verset
- une difficulté est que, sur les § de mots portant verset, il y a plus de 9 informations , donc pas accessible par regexp (limitées à 9 sub-expressions)
- d'où la nécessité de traiter le n° de verset dans un premier passage, en laissant une forme "normalisée" du § de mot
- normalisé = tous les mots vont pouvoir se traiter à l'identique
- [X] (query-replace-regexp "\\(<table class=\"tablefloat\".*?\"middle\".*?>\\).*?\\(<span class=\"pos\">.*?\\)<span class=\"reftrans\">.*?\\(<span class=\"translit\".*?\\)<span class=\"refmain\">\\([1-9][0-9]?\\).*?\\(<span class=\"greek\">.*?\\)<span class=\"refbot\">.*?\\(<span class=\"eng\">.*?\\)<span class=\"reftop2\">.*?\\(<span class=\"strongsnt.*\\)" "\n|\\4||\\1\\2\\3\\5\\6\\7")

****** traitement des mots
- pour des raisons de contraintes des regexp (pas plus de 9 sub-expressions), on abandonne de l'info, a priori redondante

- (query-replace-regexp "<table class=\"tablefloat\">.*<span class=\"pos\"><a href=\".*?\" title=\"\\(.*?\\)\">\\([1-9][0-9]?[0-9]?[0-9]?\\)<.*?<span class=\"strongsnt\"><a href=\".*?\" title=\"\\(.*?\\)\">\\[e]<.*?<span class=\"translit\"><a href=\".*?\" title=\"\\(.*?\\)\">\\(.*?\\)<.*?<span class=\"greek\">\\(.*?\\)<.*?<.*?<span class=\"eng\">\\(.*?\\)<.*?<span class=\"strongsnt\"><a href=\".*?\" title=\"\\(.*?\\)\">\\(.*?\\)<.*>$" "\n|||\\1|\\2|\\3|\\4|\\5|\\6|\\7|\\8|\\9|")

****** suppression du texte inutile
- (query-replace-regexp "|\n+[^|\n]*\n|" "|\n|")

****** définition des largeurs de colonnes
- (query-replace-regexp "^\\(\\* <¤ST[A]RT¤>[^|]*\\)" "\\1| <10> | <10> | <10> | <10> | <10> | <10> | <10> | <10> | <10> | <10> | <10> |\n")




****** création d'un ligne "book" = intitulé du livre - DEPRECATED car fait partie du le traitement intégré
#+BEGIN_SRC 
(;;query-replace-regexp "^<html>\n\\(.*\\)\n\\(|.*?|.*|\\)\\(.*?\\) 1" "|book|||||\\3\n\\1\n\\2\\3 1")
#+END_SRC



**** post traitement
***** intégré
****** TODO orgtbl-ctrl-c-ctrl-c	      M-x ... RET
****** le code :


#+name post_treatment
#+BEGIN_SRC elisp :results append
  (defun goto-next-or-same-chapter()
    (progn 
      (re-search-forward "^| *verse *" (point-max) t)
      (re-search-backward "^| *chapter *" (point-min) t)))
    
  (progn
    (goto-char (search-forward-regexp "<[¤]START¤>"))
    
    ;; inscription du symbole du livre
    (replace-regexp "^| *book *| *|" "|book|Mc|")
    (goto-char (search-backward-regexp "<¤[S]TART¤>"))
    
    ;; normalisation à 2 chiffres des n° de chapitres et versets
    (replace-regexp "^| *\\(chapter\\|verse\\) *| *\\([1-9][^0-9]\\)" "| \\1 | 0\\2")
    ;; (goto-char (search-backward-regexp "<¤S[T]ART¤>"))
    (goto-char (point-max))
    (goto-char (search-backward-regexp "<¤[S]TART¤>"))
    
    ;; propager les références livre/chapitre/verset
    (save-excursion
      (save-restriction
        (goto-char (point-max))
        (goto-char (search-backward-regexp "<¤ST[A]RT¤>"))
        (org-narrow-to-subtree)
        ;; propagation de book à chapter
        (goto-char (point-min))
        (while (re-search-forward "^| *book *| *\\(.*?\\) *|\\([^¤]*?\\)\n| *chapter *| *\\([0-9][0-9]\\)" (point-max) t)
          (replace-match 
           (concat "| book | " (match-string 1) " |" (match-string 2) " \n| chapter | " (match-string 1) "_" (match-string 3)))
          (goto-char (point-min)))
        
        ;; propagation de chapter à verse
        (goto-char (point-min))
        (while (re-search-forward "^| *chapter *| *\\(.*?\\) *|\\([^¤]*?\\)\n| *verse *| *\\([0-9][0-9]\\)" (point-max) t)
          (replace-match 
           (concat "| chapter | " (match-string 1) " |" (match-string 2) "\n| verse | " (match-string 1) ":" (match-string 3)))
          (goto-next-or-same-chapter))
        
        ;; propager sur le premier word après un verse
        (goto-char (point-min))
        (replace-regexp "^| *verse *| *\\(.*?\\) *|\\([^¤]*?\\)\n| *word *| *|" "| verse | \\1 |\\2\n| word | \\1|")
        
        ;; puis propager de word en word adjacent (ou toute ligne or "verse")
        (goto-char (point-min))
        (while (re-search-forward "^| *\\(title\\|RL\\|indentation\\|word\\) *| *\\([^_]+_[0-9][0-9]:[0-9][0-9]\\) *|\\(.*?\\)\n| *\\(title\\|RL\\|indentation\\|word\\) *| *|" (point-max) t)
          (replace-match 
           (concat "| " (match-string 1) " | " (match-string 2) " |" (match-string 3) "\n| " (match-string 4) " | " (match-string 2) " |"))
          (goto-char (point-min)))))
  
    ; normalisation à 4 chiffres des n° strong à un, deux ou 3 chiffre
    ; attention, contrairement au code qui précède, on utilise pour évoluer dans le texte l'approche bien meilleure "narrow-to-element" ou le element est le tableau
    (save-excursion
      (save-restriction
        (goto-char (point-min))
        (goto-char (search-forward-regexp "^#\\+tblname: book"))
        (org-narrow-to-element)
    
        ;; normalisation à 4 chiffres des n° strong à un seul chiffre
        (goto-char (point-min))
        (replace-regexp "^| *word *| *\\([^|]*?\\) *| *\\([^|]*?\\) *| *\\([1-9]\\) *|" "| word | \\1 | \\2 | 000\\3 |")
        
        ;; normalisation à 4 chiffres des n° strong à deux chiffres
        (goto-char (point-min))
        (replace-regexp "^| *word *| *\\([^|]*?\\) *| *\\([^|]*?\\) *| *\\([1-9][0-9]\\) *|" "| word | \\1 | \\2 | 00\\3 |")
        
        ;; normalisation à 4 chiffres des n° strong à 3 chiffres
        (goto-char (point-min))
        (replace-regexp "^| word *| *\\([^|]*?\\) *| *\\([^|]*?\\) *| *\\([1-9][0-9][0-9]\\) *|" "| word | \\1 | \\2 | 0\\3 |"))))
    #+END_SRC


****** TEMP <2013-02-02 sam.>
#+name: retablir-n°-strongs à 1,2 ou 3 chiffres
#+BEGIN_SRC 
(query-replace-regexp "^| word *| \\([^|]*?\\) *| \\([^|]*?\\) | +00?0?" "| word | \\1 | \\2 | ")
#+END_SRC



***** DEPRECATED pas à pas détaillé
****** code du livre : "Mc"
#+BEGIN_SRC 
(query-replace-regexp "^| *book *| *|" "|book|Mc|")
#+END_SRC

****** normalisation à 2 chiffres des numérations
#+BEGIN_SRC elisp
  (replace-regexp "^| *\\(chapter\\|verse\\) *| *\\([1-9][^0-9]\\)" "| \\1 | 0\\2")
#+END_SRC


****** codage du livre_chapitre:verset pour tous les "word"

xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
cette approche n'est pas optimale ; probablement en O(n2)
Mieux vaudra reporter le code du livre sur tous les =chapters=, puis le code "livre&chapitre" sur chaque =verse=; puis le code complet sur chaque =word= ;
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx à faire à la place du code ci-dessous xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx


#+BEGIN_SRC elisp
  DEPRECATED pour cause de STACK OVERFLOW (while (query-replace-regexp "^| *book *| *\\(.*?\\) *|\\([^¤]*?\\)\n| *chapter *| *\\([0-9][0-9]?\\)\\([^¤]*?\\)\n| *verse *| *\\([0-9][0-9]?\\)\\([^¤]*?\\)\n| *word *| *|" "| book | \\1|\\2\n| chapter | \\3\\4\n| verse | \\5\\6\n| word | \\1_\\3:\\5 |") (goto-char(search-backward-regexp "<¤ST[A]RT¤>")))
#+END_SRC

#+NAME propager le nom du livre
#+BEGIN_SRC elisp

(while (replace-regexp "^| *book *| *\\(.*?\\) *|\\([^¤]*?\\)\n| *chapter *| *\\([0-9][0-9]\\)" "| book | \\1 |\\2\n| chapter | \\1_\\3") (goto-char(search-backward-regexp "<¤ST[A]RT¤>")))
#+END_SRC

#+NAME propager les chapitres sur les "verse"
#+BEGIN_SRC elisp
"attention au "not" nécessaire si et ssi le replace-regexp n'est pas en mode query"
(while (not(replace-regexp "^| *chapter *| *\\(.*?\\) *|\\([^¤]*?\\)\n| *verse *| *\\([0-9][0-9]\\)" "| chapter | \\1 |\\2\n| verse | \\1:\\3")) (goto-char(search-backward-regexp "<¤ST[A]RT¤>")))
#+END_SRC

#+NAME propager les versets sur les "word"
#+BEGIN_SRC elisp
"attention au "not" nécessaire si et ssi le replace-regexp n'est pas en mode query"
(while (not(replace-regexp "^| *verse *| *\\(.*?\\) *|\\([^¤]*?\\)\n| *word *| *|" "| verse | \\1 |\\2\n| word | \\1|")) (goto-char(search-backward-regexp "<¤ST[A]RT¤>")))
#+END_SRC





****** DONE normaliser les n° STRONG, et intégrer 
#+name: normaliser-n°-strong-ALPHA
  #+BEGIN_SRC elisp
    ;; normalisation à 4 chiffres des n° strong à un seul chiffre
    (goto-char (point-min))
    (replace-regexp "^| word *| \\([^|]*?\\) *| \\([^|]*?\\) | +\\([1-9]\\) " "| word | \\1 | \\2 | 000\\3")
    
    ;; normalisation à 4 chiffres des n° strong à deux chiffres
    (goto-char (point-min))
    (replace-regexp "^| word *| \\([^|]*?\\) *| \\([^|]*?\\) | +\\([1-9][0-9]\\) " "| word | \\1 | \\2 | 00\\3")
    
    ;; normalisation à 4 chiffres des n° strong à 3 chiffres
    (goto-char (point-min))
    (replace-regexp "^| word *| \\([^|]*?\\) *| \\([^|]*?\\) | +\\([1-9][0-9][0-9]\\) " "| word | \\1 | \\2 | 0\\3")
    
  #+END_SRC



** recherche de chiasmes


- fonctionne mais sort des mots inintéressants : "^| +| +| .*?\\(| +[0-9]\\{1,4\\} +|\\).*\n[^¤]\\{1,1000\\}| +| +| .*?\\(| +[0-9]\\{1,4\\} +|\\).*\n[^¤]\\{1,1000\\}\\2.*\n[^¤]\\{1,1000\\}\\1"
- filtré par imposition de mots de taille minimale 5 : "^| +| +| .*?\\(| +[0-9]\\{1,4\\} +|\\)[^|]*|[^|]*| [^ ]\\{5\\}.*\n[^¤]\\{1,1000\\}| +| +| .*?\\(| +[0-9]\\{1,4\\} +|\\)[^|]*|[^|]*| [^ ]\\{5\\}.*\n[^¤]\\{1,1000\\}\\2.*\n[^¤]\\{1,1000\\}\\1"
- idem, avec 10.000 caractères entre le 1er et le 2ème terme, mais impossible d'accroitre les autres intervalles, car donne un stack overflow : "^| +| +| .*?\\(| +[0-9]\\{1,4\\} +|\\)[^|]*|[^|]*| [^ ]\\{5\\}.*\n[^¤]\\{1,10000\\}| +| +| .*?\\(| +[0-9]\\{1,4\\} +|\\)[^|]*|[^|]*| [^ ]\\{5\\}.*\n[^¤]\\{1,1000\\}\\(\\2\\).*\n[^¤]\\{1,1000\\}\\(\\1\\)"






** extraction des mots grecs

NB. une meilleure approche serait d'extraire N colonnes, N variable, mais je ne sais pas faire pour l'instant ...

Dans un premier temps, on reconstruit une table extraite avec les 3 colonnes cibles

résultat visé (exemple): 
#+BEGIN_SRC local
(query-replace-regexp "| " "")
#+END_SRC

| ref      | greek                                           | french                                              | StrongNr                             |
|----------+-------------------------------------------------+-----------------------------------------------------+--------------------------------------|
| Mc_01:01 | ΑΡΧΗ τοῦ εὐαγγελίου Ἰησοῦ Χριστοῦ [υἱοῦ θεοῦ]   | Commencement de l'annonce de grâces de Jésus Christ | 746 3588 2098 2424 5547 5207 2316    |
| Mc_01:02 | Καθὼς γέγραπται ἐν τῷ Ἠσαίᾳ τῷ προφήτῃ          | comme il est écrit en Isaïe le prophète             | 2531 1125 1722 3588 2268 3588 4396   |
|          | Ἰδοὺ ἀποστέλλω τὸν ἄγγελόν μου πρὸ προσώπου σου | vois j'envoie mon messager devant ta face           | 3708 649 3588 32 1473 4253 4383 4771 |
|          | ὃς κατασκευάσει τὴν ὁδόν σου                    | qui préparera ta voie                               | 3739 2680 3588 3598 4771             |
|          | Φωνὴ βοῶντος ἐν τῇ ἐρήμῳ                        | voix qui crie en solitude                           |                                      |
|          |                                                 |                                                     |                                      |
  




#+name: extract-3-cols(col1=book[,1], col2=book[,3], col3=book[,7])
#+BEGIN_SRC elisp
(mapcar* 'list col1 col2 col3)



#+END_SRC


#+name: extract-3-cols(col1=book[,1], col2=book[,3], col3=book[,7])
#+BEGIN_SRC elisp
;(mapcar* 'list col1 col2 col3) ;celui-ci fonctionne et renvoie un tableau à 3 colonnes
; (mapcar* 'list (list col1)) ; renvoie un unique élément, tous les éléments sont concaténés, donc on s'affranchi des '|'
; (list col1) ; renvoie un tableau à 1 ligne et n colonnes
(list col1 col2 col3) ;renvoie un tableau à 3 lignes et n colonnes
#+END_SRC

#+RESULTS: extract-3-cols
| Mc | Mc_01 |   |   |   | Mc_01:01 | Mc_01:01 | Mc_01:01 | Mc_01:01 | Mc_01:01 | Mc_01:01 | Mc_01:01 | Mc_01:01 | Mc_01:01 | Mc_01:01 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:02 | Mc_01:03 | Mc_01:03 | Mc_01:03 | Mc_01:03 | Mc_01:03 | Mc_01:03 | Mc_01:03 | Mc_01:03 | Mc_01:03 | Mc_01:03 | Mc_01:03 | Mc_01:03 | Mc_01:03 | Mc_01:03 | Mc_01:03 | Mc_01:03 | Mc_01:03 | Mc_01:03 | Mc_01:03 | Mc_01:03 | Mc_01:04 | Mc_01:04 | Mc_01:04 | Mc_01:04 | Mc_01:04 | Mc_01:04 | Mc_01:04 | Mc_01:04 | Mc_01:04 | Mc_01:04 | Mc_01:04 | Mc_01:04 | Mc_01:04 | Mc_01:04 | Mc_01:04 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:05 | Mc_01:06 | Mc_01:06 | Mc_01:06 | Mc_01:06 | Mc_01:06 | Mc_01:06 | Mc_01:06 | Mc_01:06 | Mc_01:06 | Mc_01:06 | Mc_01:06 | Mc_01:06 | Mc_01:06 | Mc_01:06 | Mc_01:06 | Mc_01:06 | Mc_01:06 | Mc_01:06 | Mc_01:06 | Mc_01:06 | Mc_01:06 | Mc_01:07 | Mc_01:07 | Mc_01:07 | Mc_01:07 | Mc_01:07 | Mc_01:07 | Mc_01:07 | Mc_01:07 | Mc_01:07 | Mc_01:07 | Mc_01:07 | Mc_01:07 | Mc_01:07 | Mc_01:07 | Mc_01:07 | Mc_01:07 | Mc_01:07 | Mc_01:07 | Mc_01:07 | Mc_01:07 | Mc_01:07 | Mc_01:08 | Mc_01:08 | Mc_01:08 | Mc_01:08 | Mc_01:08 | Mc_01:08 | Mc_01:08 | Mc_01:08 | Mc_01:08 | Mc_01:08 | Mc_01:08 | Mc_01:08 | Mc_01:08 | Mc_01:08 | Mc_01:08 | Mc_01:09 | Mc_01:09 | Mc_01:09 | Mc_01:09 | Mc_01:09 | Mc_01:09 | Mc_01:09 | Mc_01:09 | Mc_01:09 | Mc_01:09 | Mc_01:09 | Mc_01:09 | Mc_01:09 | Mc_01:09 | Mc_01:09 | Mc_01:09 | Mc_01:09 | Mc_01:09 | Mc_01:09 | Mc_01:09 | Mc_01:10 | Mc_01:10 | Mc_01:10 | Mc_01:10 | Mc_01:10 | Mc_01:10 | Mc_01:10 | Mc_01:10 | Mc_01:10 | Mc_01:10 | Mc_01:10 | Mc_01:10 | Mc_01:10 | Mc_01:10 | Mc_01:10 | Mc_01:10 | Mc_01:10 | Mc_01:10 | Mc_01:10 | Mc_01:11 | Mc_01:11 | Mc_01:11 | Mc_01:11 | Mc_01:11 | Mc_01:11 | Mc_01:11 | Mc_01:11 | Mc_01:11 | Mc_01:11 | Mc_01:11 | Mc_01:11 | Mc_01:11 | Mc_01:11 | Mc_01:11 | Mc_01:11 | Mc_01:11 | Mc_01:11 | Mc_01:11 | Mc_01:11 | Mc_01:12 | Mc_01:12 | Mc_01:12 | Mc_01:12 | Mc_01:12 | Mc_01:12 | Mc_01:12 | Mc_01:12 | Mc_01:12 | Mc_01:12 | Mc_01:13 | Mc_01:13 | Mc_01:13 | Mc_01:13 | Mc_01:13 | Mc_01:13 | Mc_01:13 | Mc_01:13 | Mc_01:13 | Mc_01:13 | Mc_01:13 | Mc_01:13 | Mc_01:13 | Mc_01:13 | Mc_01:13 | Mc_01:13 | Mc_01:13 | Mc_01:13 | Mc_01:13 | Mc_01:13 | Mc_01:13 | Mc_01:13 | Mc_01:13 | Mc_01:13 | Mc_01:14 | Mc_01:14 | Mc_01:14 | Mc_01:14 | Mc_01:14 | Mc_01:14 | Mc_01:14 | Mc_01:14 | Mc_01:14 | Mc_01:14 | Mc_01:14 | Mc_01:14 | Mc_01:14 | Mc_01:14 | Mc_01:14 | Mc_01:14 | Mc_01:14 | Mc_01:14 | Mc_01:14 | Mc_01:14 | Mc_01:15 | Mc_01:15 | Mc_01:15 | Mc_01:15 | Mc_01:15 | Mc_01:15 | Mc_01:15 | Mc_01:15 | Mc_01:15 | Mc_01:15 | Mc_01:15 | Mc_01:15 | Mc_01:15 | Mc_01:15 | Mc_01:15 | Mc_01:15 | Mc_01:15 | Mc_01:15 | Mc_01:15 | Mc_01:15 | Mc_01:15 | Mc_01:15 | Mc_01:16 | Mc_01:16 | Mc_01:16 | Mc_01:16 | Mc_01:16 | Mc_01:16 | Mc_01:16 | Mc_01:16 | Mc_01:16 | Mc_01:16 | Mc_01:16 | Mc_01:16 | Mc_01:16 | Mc_01:16 | Mc_01:16 | Mc_01:16 | Mc_01:16 | Mc_01:16 | Mc_01:16 | Mc_01:16 | Mc_01:16 | Mc_01:16 | Mc_01:17 | Mc_01:17 | Mc_01:17 | Mc_01:17 | Mc_01:17 | Mc_01:17 | Mc_01:17 | Mc_01:17 | Mc_01:17 | Mc_01:17 | Mc_01:17 | Mc_01:17 | Mc_01:17 | Mc_01:17 | Mc_01:17 | Mc_01:18 | Mc_01:18 | Mc_01:18 | Mc_01:18 | Mc_01:18 | Mc_01:18 | Mc_01:18 | Mc_01:18 | Mc_01:19 | Mc_01:19 | Mc_01:19 | Mc_01:19 | Mc_01:19 | Mc_01:19 | Mc_01:19 | Mc_01:19 | Mc_01:19 | Mc_01:19 | Mc_01:19 | Mc_01:19 | Mc_01:19 | Mc_01:19 | Mc_01:19 | Mc_01:19 | Mc_01:19 | Mc_01:19 | Mc_01:19 | Mc_01:19 | Mc_01:19 | Mc_01:19 | Mc_01:20 | Mc_01:20 | Mc_01:20 | Mc_01:20 | Mc_01:20 | Mc_01:20 | Mc_01:20 | Mc_01:20 | Mc_01:20 | Mc_01:20 | Mc_01:20 | Mc_01:20 | Mc_01:20 | Mc_01:20 | Mc_01:20 | Mc_01:20 | Mc_01:20 | Mc_01:20 | Mc_01:20 | Mc_01:20 | Mc_01:20 | Mc_01:20 | Mc_01:21 | Mc_01:21 | Mc_01:21 | Mc_01:21 | Mc_01:29 | Mc_01:29 | Mc_01:29 | Mc_01:29 | Mc_01:29 | Mc_01:30 | Mc_01:30 | Mc_01:30 | Mc_01:30 | Mc_01:30 | Mc_01:30 | Mc_01:30 | Mc_01:30 | Mc_01:30 | Mc_01:30 | Mc_01:30 | Mc_01:30 | Mc_01:30 | Mc_01:31 | Mc_01:31 | Mc_01:31 | Mc_01:31 | Mc_01:31 | Mc_01:31 | Mc_01:31 | Mc_01:31 | Mc_01:31 | Mc_01:31 | Mc_01:31 | Mc_01:31 | Mc_01:31 | Mc_01:31 | Mc_01:31 | Mc_01:31 | Mc_01:31 | Mc_01:31 | Mc_01:31 | Mc_01:32 | Mc_01:32 | Mc_01:32 | Mc_01:32 | Mc_01:32 | Mc_01:32 | Mc_01:32 | Mc_01:32 | Mc_01:32 | Mc_01:32 | Mc_01:32 | Mc_01:32 | Mc_01:32 | Mc_01:32 | Mc_01:32 | Mc_01:32 | Mc_01:32 | Mc_01:32 | Mc_01:33 | Mc_01:33 | Mc_01:33 | Mc_01:33 | Mc_01:33 | Mc_01:33 | Mc_01:33 | Mc_01:33 | Mc_01:33 | Mc_01:33 | Mc_01:34 | Mc_01:34 | Mc_01:34 | Mc_01:34 | Mc_01:34 | Mc_01:34 | Mc_01:34 | Mc_01:34 | Mc_01:34 | Mc_01:34 | Mc_01:34 | Mc_01:34 | Mc_01:34 | Mc_01:34 | Mc_01:34 | Mc_01:34 | Mc_01:34 | Mc_01:34 | Mc_01:34 | Mc_01:34 | Mc_01:34 | Mc_01:34 | Mc_01:34 | Mc_01:35 | Mc_01:35 | Mc_01:35 | Mc_01:35 | Mc_01:35 | Mc_01:35 | Mc_01:35 | Mc_01:35 | Mc_01:35 | Mc_01:35 | Mc_01:35 | Mc_01:35 | Mc_01:35 | Mc_01:35 | Mc_01:36 | Mc_01:36 | Mc_01:36 | Mc_01:36 | Mc_01:36 | Mc_01:36 | Mc_01:36 | Mc_01:36 | Mc_01:36 | Mc_01:37 | Mc_01:37 | Mc_01:37 | Mc_01:37 | Mc_01:37 | Mc_01:37 | Mc_01:37 | Mc_01:37 | Mc_01:37 | Mc_01:37 | Mc_01:37 | Mc_01:37 | Mc_01:37 | Mc_01:38 | Mc_01:38 | Mc_01:38 | Mc_01:38 | Mc_01:38 | Mc_01:38 | Mc_01:38 | Mc_01:38 | Mc_01:38 | Mc_01:38 | Mc_01:38 | Mc_01:38 | Mc_01:38 | Mc_01:38 | Mc_01:38 | Mc_01:38 | Mc_01:38 | Mc_01:38 | Mc_01:39 | Mc_01:39 | Mc_01:39 | Mc_01:39 | Mc_01:39 | Mc_01:39 | Mc_01:39 | Mc_01:39 | Mc_01:39 | Mc_01:39 | Mc_01:39 | Mc_01:39 | Mc_01:39 | Mc_01:39 | Mc_01:39 | Mc_01:39 | Mc_01:39 | Mc_01:39 | Mc_01:40 | Mc_01:40 | Mc_01:40 | Mc_01:40 | Mc_01:40 | Mc_01:40 | Mc_01:40 | Mc_01:40 | Mc_01:40 | Mc_01:40 | Mc_01:40 | Mc_01:40 | Mc_01:40 | Mc_01:40 | Mc_01:40 | Mc_01:40 | Mc_01:40 | Mc_01:40 | Mc_01:40 | Mc_01:41 | Mc_01:41 | Mc_01:41 | Mc_01:41 | Mc_01:41 | Mc_01:41 | Mc_01:41 | Mc_01:41 | Mc_01:41 | Mc_01:41 | Mc_01:41 | Mc_01:41 | Mc_01:41 | Mc_01:42 | Mc_01:42 | Mc_01:42 | Mc_01:42 | Mc_01:42 | Mc_01:42 | Mc_01:42 | Mc_01:42 | Mc_01:42 | Mc_01:42 | Mc_01:43 | Mc_01:43 | Mc_01:43 | Mc_01:43 | Mc_01:43 | Mc_01:43 | Mc_01:43 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:44 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_01:45 | Mc_02 |   |   |   | Mc_02:01 | Mc_02:01 | Mc_02:01 | Mc_02:01 | Mc_02:01 | Mc_02:01 | Mc_02:01 | Mc_02:01 | Mc_02:01 | Mc_02:01 | Mc_02:01 | Mc_02:01 | Mc_02:01 | Mc_02:02 | Mc_02:02 | Mc_02:02 | Mc_02:02 | Mc_02:02 | Mc_02:02 | Mc_02:02 | Mc_02:02 | Mc_02:02 | Mc_02:02 | Mc_02:02 | Mc_02:02 | Mc_02:02 | Mc_02:02 | Mc_02:02 | Mc_02:02 | Mc_02:02 | Mc_02:02 | Mc_02:02 | Mc_02:03 | Mc_02:03 | Mc_02:03 | Mc_02:03 | Mc_02:03 | Mc_02:03 | Mc_02:03 | Mc_02:03 | Mc_02:03 | Mc_02:03 | Mc_02:04 | Mc_02:04 | Mc_02:04 | Mc_02:04 | Mc_02:04 | Mc_02:04 | Mc_02:04 | Mc_02:04 | Mc_02:04 | Mc_02:04 | Mc_02:04 | Mc_02:04 | Mc_02:04 | Mc_02:04 | Mc_02:04 | Mc_02:04 | Mc_02:04 | Mc_02:04 | Mc_02:04 | Mc_02:04 | Mc_02:04 | Mc_02:04 | Mc_02:04 | Mc_02:05 | Mc_02:05 | Mc_02:05 | Mc_02:05 | Mc_02:05 | Mc_02:05 | Mc_02:05 | Mc_02:05 | Mc_02:05 | Mc_02:05 | Mc_02:05 | Mc_02:05 | Mc_02:05 | Mc_02:05 | Mc_02:05 | Mc_02:05 | Mc_02:06 | Mc_02:06 | Mc_02:06 | Mc_02:06 | Mc_02:06 | Mc_02:06 | Mc_02:06 | Mc_02:06 | Mc_02:06 | Mc_02:06 | Mc_02:06 | Mc_02:06 | Mc_02:06 | Mc_02:06 | Mc_02:07 | Mc_02:07 | Mc_02:07 | Mc_02:07 | Mc_02:07 | Mc_02:07 | Mc_02:07 | Mc_02:07 | Mc_02:07 | Mc_02:07 | Mc_02:07 | Mc_02:07 | Mc_02:07 | Mc_02:07 | Mc_02:07 | Mc_02:08 | Mc_02:08 | Mc_02:08 | Mc_02:08 | Mc_02:08 | Mc_02:08 | Mc_02:08 | Mc_02:08 | Mc_02:08 | Mc_02:08 | Mc_02:08 | Mc_02:08 | Mc_02:08 | Mc_02:08 | Mc_02:08 | Mc_02:08 | Mc_02:08 | Mc_02:08 | Mc_02:08 | Mc_02:08 | Mc_02:08 | Mc_02:08 | Mc_02:08 | Mc_02:09 | Mc_02:09 | Mc_02:09 | Mc_02:09 | Mc_02:09 | Mc_02:09 | Mc_02:09 | Mc_02:09 | Mc_02:09 | Mc_02:09 | Mc_02:09 | Mc_02:09 | Mc_02:09 | Mc_02:09 | Mc_02:09 | Mc_02:09 | Mc_02:09 | Mc_02:09 | Mc_02:09 | Mc_02:09 | Mc_02:09 | Mc_02:10 | Mc_02:10 | Mc_02:10 | Mc_02:10 | Mc_02:10 | Mc_02:10 | Mc_02:10 | Mc_02:10 | Mc_02:10 | Mc_02:10 | Mc_02:10 | Mc_02:10 | Mc_02:10 | Mc_02:10 | Mc_02:10 | Mc_02:10 | Mc_02:10 | Mc_02:10 | Mc_02:10 | Mc_02:11 | Mc_02:11 | Mc_02:11 | Mc_02:11 | Mc_02:11 | Mc_02:11 | Mc_02:11 | Mc_02:11 | Mc_02:11 | Mc_02:11 | Mc_02:11 | Mc_02:11 | Mc_02:11 | Mc_02:11 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:12 | Mc_02:13 | Mc_02:13 | Mc_02:13 | Mc_02:13 | Mc_02:13 | Mc_02:13 | Mc_02:13 | Mc_02:13 | Mc_02:13 | Mc_02:13 | Mc_02:13 | Mc_02:13 | Mc_02:13 | Mc_02:13 | Mc_02:13 | Mc_02:13 | Mc_02:13 | Mc_02:14 | Mc_02:14 | Mc_02:14 | Mc_02:14 | Mc_02:14 | Mc_02:14 | Mc_02:14 | Mc_02:14 | Mc_02:14 | Mc_02:14 | Mc_02:14 | Mc_02:14 | Mc_02:14 | Mc_02:14 | Mc_02:14 | Mc_02:14 | Mc_02:14 | Mc_02:14 | Mc_02:14 | Mc_02:14 | Mc_02:14 | Mc_02:14 | Mc_02:14 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:15 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:16 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:17 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:18 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:19 | Mc_02:20 | Mc_02:20 | Mc_02:20 | Mc_02:20 | Mc_02:20 | Mc_02:20 | Mc_02:20 | Mc_02:20 | Mc_02:20 | Mc_02:20 | Mc_02:20 | Mc_02:20 | Mc_02:20 | Mc_02:20 | Mc_02:20 | Mc_02:20 | Mc_02:20 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:21 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:22 | Mc_02:23 | Mc_02:23 | Mc_02:23 | Mc_02:23 | Mc_02:23 | Mc_02:23 | Mc_02:23 | Mc_02:23 | Mc_02:23 | Mc_02:23 | Mc_02:23 | Mc_02:23 | Mc_02:23 | Mc_02:23 | Mc_02:23 | Mc_02:23 | Mc_02:23 | Mc_02:23 | Mc_02:23 | Mc_02:23 | Mc_02:23 | Mc_02:24 | Mc_02:24 | Mc_02:24 | Mc_02:24 | Mc_02:24 | Mc_02:24 | Mc_02:24 | Mc_02:24 | Mc_02:24 | Mc_02:24 | Mc_02:24 | Mc_02:24 | Mc_02:24 | Mc_02:24 | Mc_02:25 | Mc_02:25 | Mc_02:25 | Mc_02:25 | Mc_02:25 | Mc_02:25 | Mc_02:25 | Mc_02:25 | Mc_02:25 | Mc_02:25 | Mc_02:25 | Mc_02:25 | Mc_02:25 | Mc_02:25 | Mc_02:25 | Mc_02:25 | Mc_02:25 | Mc_02:25 | Mc_02:25 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:26 | Mc_02:27 | Mc_02:27 | Mc_02:27 | Mc_02:27 | Mc_02:27 | Mc_02:27 | Mc_02:27 | Mc_02:27 | Mc_02:27 | Mc_02:27 | Mc_02:27 | Mc_02:27 | Mc_02:27 | Mc_02:27 | Mc_02:27 | Mc_02:27 | Mc_02:27 | Mc_02:28 | Mc_02:28 | Mc_02:28 | Mc_02:28 | Mc_02:28 | Mc_02:28 | Mc_02:28 | Mc_02:28 | Mc_02:28 |
|    |       |   |   |   |          |      746 |     3588 |     2098 |     2424 |     5547 |     5207 |     2316 |          |          |          |     2531 |     1125 |     1722 |     3588 |     2268 |     3588 |     4396 |          |          |     3708 |      649 |     3588 |       32 |     1473 |     4253 |     4383 |     4771 |          |          |     3739 |     2680 |     3588 |     3598 |     4771 |          |          |          |     5456 |      994 |     1722 |     3588 |     2048 |          |          |     2090 |     3588 |     3598 |     2962 |          |          |     2117 |     4160 |     3588 |     5147 |      846 |          |          |     1096 |     2491 |     3588 |      907 |     1722 |     3588 |     2048 |     2532 |     2784 |      908 |     3341 |     1519 |      859 |      266 |          |     2532 |     1607 |     4314 |      846 |     3956 |     3588 |     2449 |     5561 |     2532 |     3588 |     2415 |     3956 |     2532 |      907 |     5259 |      846 |     1722 |     3588 |     2446 |     4215 |     1843 |     3588 |      266 |      846 |          |     2532 |     1510 |     3588 |     2491 |     1746 |     2359 |     2574 |     2532 |     2223 |     1193 |     4012 |     3588 |     3751 |      846 |     2532 |     2068 |      200 |     2532 |     3192 |       66 |          |     2532 |     2784 |     3004 |     2064 |     3588 |     2478 |     1473 |     3694 |     1473 |     3739 |     3756 |     1510 |     2425 |     2955 |     3089 |     3588 |     2438 |     3588 |     5266 |      846 |          |     1473 |      907 |     4771 |     5204 |      846 |     1161 |      907 |     4771 |     1722 |     4151 |       40 |          |          |          |          |     2532 |     1096 |     1722 |     1565 |     3588 |     2250 |     2064 |     2424 |      575 |     3478 |     3588 |     1056 |     2532 |      907 |     1519 |     3588 |     2446 |     5259 |     2491 |          |     2532 |     2112 |      305 |     1537 |     3588 |     5204 |     3708 |     4977 |     3588 |     3772 |     2532 |     3588 |     4151 |     5613 |     4058 |     2597 |     1519 |      846 |          |     2532 |     5456 |     1096 |     1537 |     3588 |     3772 |     4771 |     1510 |     3588 |     5207 |     1473 |     3588 |       27 |     1722 |     4771 |     2106 |          |          |          |          |     2532 |     2112 |     3588 |     4151 |      846 |     1544 |     1519 |     3588 |     2048 |          |     2532 |     1510 |     1722 |     3588 |     2048 |     5062 |     2250 |     3985 |     5259 |     3588 |     4567 |     2532 |     1510 |     3326 |     3588 |     2342 |     2532 |     3588 |       32 |     1247 |      846 |          |          |          |     2532 |          |     3326 |     1161 |     3588 |     3860 |     3588 |     2491 |     2064 |     3588 |     2424 |     1519 |     3588 |     1056 |     2784 |     3588 |     2098 |     3588 |     2316 |          |     2532 |     3004 |     3754 |     4137 |     3588 |     2540 |     2532 |     1448 |     3588 |      932 |     3588 |     2316 |     3340 |     2532 |     4100 |     1722 |     3588 |     2098 |          |          |          |          |     2532 |     3855 |     3844 |     3588 |     2281 |     3588 |     1056 |     3708 |     4613 |     2532 |      406 |     3588 |       80 |     4613 |      906 |     1722 |     3588 |     2281 |     1510 |     1063 |      231 |          |     2532 |     3004 |      846 |     3588 |     2424 |     1205 |     3694 |     1473 |     2532 |     4160 |     4771 |     1096 |      231 |      444 |          |     2532 |     2112 |      863 |     3588 |     1350 |      190 |      846 |          |     2532 |     4260 |     3641 |     3708 |     2385 |     3588 |     3588 |     2199 |     2532 |     2491 |     3588 |       80 |      846 |     2532 |      846 |     1722 |     3588 |     4143 |     2675 |     3588 |     1350 |          |     2532 |     2112 |     2564 |      846 |     2532 |      863 |     3588 |     3962 |      846 |     2199 |     1722 |     3588 |     4143 |     3326 |     3588 |     3411 |      565 |     3694 |      846 |          |          |          |     2532 |     1531 |     1519 |      406 |     3326 |     2385 |     2532 |     2491 |          |     3588 |     1161 |     3994 |     4613 |     2621 |     4445 |     2532 |     2112 |     3004 |      846 |     4012 |      846 |          |     2532 |     4334 |     1453 |      846 |     2902 |     3588 |     5495 |     2532 |      863 |      846 |     3588 |     4446 |     2532 |     1247 |      846 |          |          |          |          |     3798 |     1161 |     1096 |     3753 |     1416 |     3588 |     2246 |     5342 |     4314 |      846 |     3956 |     3588 |     2560 |     2192 |     2532 |     3588 |     1139 |          |     2532 |     1510 |     3650 |     3588 |     4172 |     1996 |     4314 |     3588 |     2374 |          |     2532 |     2323 |     4183 |     2560 |     2192 |     4164 |     3554 |     2532 |     1140 |     4183 |     1544 |     2532 |     3756 |      863 |     2980 |     3588 |     1140 |     3754 |     1492 |      846 |     5547 |     1510 |          |     2532 |     4404 |     1773 |     3029 |      450 |     1831 |     2532 |      565 |     1519 |     2048 |     5117 |     2546 |     4336 |          |     2532 |     2614 |      846 |     4613 |     2532 |     3588 |     3326 |      846 |          |     2532 |     2147 |      846 |     2532 |     3004 |      846 |     3754 |     3956 |     2212 |     4771 |          |          |          |     2532 |     3004 |      846 |       71 |      237 |     1519 |     3588 |     2192 |     2969 |     2443 |     2532 |     1563 |     2784 |     1519 |     3778 |     1063 |     1831 |          |     2532 |     2064 |     2784 |     1519 |     3588 |     4864 |      846 |     1519 |     3650 |     3588 |     1056 |     2532 |     3588 |     1140 |     1544 |          |          |          |     2532 |     2064 |     4314 |      846 |     3015 |     3870 |      846 |     2532 |     1120 |     2532 |     3004 |      846 |     3754 |     1437 |     2309 |     1410 |     1473 |     2511 |          |     2532 |     4697 |     1614 |     3588 |     5495 |      846 |      680 |     2532 |     3004 |      846 |     2309 |     2511 |          |     2532 |     2112 |      565 |      575 |      846 |     3588 |     3014 |     2532 |     2511 |          |     2532 |     1690 |      846 |     2112 |     1544 |      846 |          |     2532 |     3004 |      846 |     3708 |     3367 |     3367 |     3004 |      235 |     5217 |     4572 |     1166 |     3588 |     2409 |     2532 |     4374 |     4012 |     3588 |     2512 |     4771 |     3739 |     4367 |     3475 |     1519 |     3142 |      846 |          |     3588 |     1161 |     1831 |      756 |     2784 |     4183 |     2532 |     1310 |     3588 |     3056 |     5620 |     3371 |      846 |     1410 |     5320 |     1519 |     4172 |     1525 |      235 |     1854 |     1909 |     2048 |     5117 |     1510 |     2532 |     2064 |     4314 |      846 |     3840 |       |   |   |   |          |     2532 |     1525 |     3825 |     1519 |     2584 |     1223 |     2250 |      191 |     3754 |     1722 |     3624 |     1510 |          |     2532 |     4863 |     4183 |     5620 |     3371 |     5562 |     3366 |     3588 |     4314 |     3588 |     2374 |     2532 |     2980 |      846 |     3588 |     3056 |          |          |          |     2532 |     2064 |     5342 |     4314 |      846 |     3885 |      142 |     5259 |     5064 |          |     2532 |     3361 |     1410 |     4374 |      846 |     1223 |     3588 |     3793 |      648 |     3588 |     4721 |     3699 |     1510 |     2532 |     1846 |     5465 |     3588 |     2895 |     3699 |     3588 |     3885 |     2621 |          |     2532 |     3708 |     3588 |     2424 |     3588 |     4102 |      846 |     3004 |     3588 |     3885 |     5043 |      863 |     4771 |     3588 |      266 |          |     1510 |     1161 |     5100 |     3588 |     1122 |     1563 |     2521 |     2532 |     1260 |     1722 |     3588 |     2588 |      846 |          |     5101 |     3778 |     3779 |     2980 |      987 |     5101 |     1410 |      863 |      266 |     1487 |     3361 |     1520 |     3588 |     2316 |          |     2532 |     2112 |     1921 |     3588 |     2424 |     3588 |     4151 |      846 |     3754 |     3779 |     1260 |     1722 |     1438 |     3004 |      846 |     5101 |     3778 |     1260 |     1722 |     3588 |     2588 |     4771 |          |     5101 |     1510 |     2123 |     3004 |     3588 |     3885 |      863 |     4771 |     3588 |      266 |     2228 |     3004 |     1453 |     2532 |      142 |     3588 |     2895 |     4771 |     2532 |     4043 |          |     2443 |     1161 |     1492 |     3754 |     1849 |     2192 |     3588 |     5207 |     3588 |      444 |      863 |      266 |     1909 |     3588 |     1093 |     3004 |     3588 |     3885 |          |     4771 |     3004 |     1453 |      142 |     3588 |     2895 |     4771 |     2532 |     5217 |     1519 |     3588 |     3624 |     4771 |          |     2532 |     1453 |     2532 |     2112 |      142 |     3588 |     2895 |     1831 |     1715 |     3956 |     5620 |     1839 |     3956 |     2532 |     1392 |     3588 |     2316 |     3004 |     3754 |     3779 |     3763 |     3708 |          |          |          |          |     2532 |     1831 |     3825 |     3844 |     3588 |     2281 |     2532 |     3956 |     3588 |     3793 |     2064 |     4314 |      846 |     2532 |     1321 |      846 |          |     2532 |     3855 |     3708 |     3018 |     3588 |     3588 |      256 |     2521 |     1909 |     3588 |     5058 |     2532 |     3004 |      846 |      190 |     1473 |     2532 |      450 |      190 |      846 |          |          |          |     2532 |     1096 |     2621 |      846 |     1722 |     3588 |     3614 |      846 |     2532 |     4183 |     5057 |     2532 |      268 |     4873 |     3588 |     2424 |     2532 |     3588 |     3101 |      846 |     1510 |     1063 |     4183 |     2532 |      190 |      846 |          |     2532 |     3588 |     1122 |     3588 |     5330 |     3708 |     3754 |     2068 |     3326 |     3588 |      268 |     2532 |     5057 |     3004 |     3588 |     3101 |      846 |     3754 |     3326 |     3588 |     5057 |     2532 |      268 |     2068 |          |     2532 |      191 |     3588 |     2424 |     3004 |      846 |     3754 |     3756 |     5532 |     2192 |     3588 |     2480 |     2395 |      235 |     3588 |     2560 |     2192 |     3756 |     2064 |     2564 |     1342 |      235 |      268 |          |          |          |          |     2532 |     1510 |     3588 |     3101 |     2491 |     2532 |     3588 |     5330 |     3522 |     2532 |     2064 |     2532 |     3004 |      846 |     1223 |     5101 |     3588 |     3101 |     2491 |     2532 |     3588 |     3101 |     3588 |     5330 |     3522 |     3588 |     1161 |     4674 |     3101 |     3756 |     3522 |          |     2532 |     3004 |      846 |     3588 |     2424 |     3361 |     1410 |     3588 |     5207 |     3588 |     3567 |     1722 |     3739 |     3588 |     3566 |     3326 |      846 |     1510 |     3522 |     3745 |     5550 |     2192 |     3588 |     3566 |     3326 |      846 |     3756 |     1410 |     3522 |          |     2064 |     1161 |     2250 |     3752 |      522 |      575 |      846 |     3588 |     3566 |     2532 |     5119 |     3522 |     1722 |     1565 |     3588 |     2250 |          |     3762 |     1915 |     4470 |       46 |     1976 |     1909 |     2440 |     3820 |     1487 |     1161 |     3361 |      142 |     3588 |     4138 |      575 |      846 |     3588 |     2537 |     3588 |     3820 |     2532 |     5501 |     4978 |     1096 |          |     2532 |     3762 |      906 |     3631 |     3501 |     1519 |      779 |     3820 |     1487 |     1161 |     3361 |     4486 |     3588 |     3631 |     3588 |      779 |     2532 |     3588 |     3631 |      622 |     2532 |     3588 |      779 |      235 |     3631 |     3501 |     1519 |      779 |     2537 |          |          |          |          |     2532 |     1096 |      846 |     1722 |     3588 |     4521 |     3899 |     1223 |     3588 |     4702 |     2532 |     3588 |     3101 |      846 |      756 |     3598 |     4160 |     5089 |     3588 |     4719 |          |     2532 |     3588 |     5330 |     3004 |      846 |     3708 |     5101 |     4160 |     3588 |     4521 |     3739 |     3756 |     1832 |          |     2532 |     3004 |      846 |     3763 |      314 |     5101 |     4160 |     1138 |     3753 |     5532 |     2192 |     2532 |     3983 |      846 |     2532 |     3588 |     3326 |      846 |          |     4459 |     1525 |     1519 |     3588 |     3624 |     3588 |     2316 |     1909 |        8 |      749 |     2532 |     3588 |      740 |     3588 |     4286 |     5315 |     3739 |     3756 |     1832 |     5315 |     1487 |     3361 |     3588 |     2409 |     2532 |     1325 |     2532 |     3588 |     4862 |      846 |     1510 |          |     2532 |     3004 |      846 |     3588 |     4521 |     1223 |     3588 |      444 |     1096 |     2532 |     3756 |     3588 |      444 |     1223 |     3588 |     4521 |          |     5620 |     2962 |     1510 |     3588 |     5207 |     3588 |      444 |     2532 |

*** current
*** TODO en fait, mettre un signe # avant le strong number, pour le transformer en chaîne et préserver les 4 chiffre - ou alors transformer les nombres <1000 et >9000

#+name: bibliotheque
#+BEGIN_SRC elisp
  (defun normalize-strong-number(target)
  "normalisation à 4 chiffres des n° strong à un, deux ou 3 chiffre
  
  les n° strong sont repérés comme 1, 2 ou 3 chiffres compris entre deux '|', séparés d'eux par un ou plusieurs blancs à gauche, et un blanc unique à droite
  target is the name of a table : the search will be on '^\\+tblname: ' concatened with target"
  ;    (save-excursion
   ;     (save-restriction
          (goto-char (point-min))
          (goto-char (search-forward-regexp (concat "^#\\+tblname: " target)))
          (org-narrow-to-element)
      
          ;; normalisation à 4 chiffres des n° strong à un seul chiffre
     ;     (goto-char (point-min))
      ;    (replace-regexp "^| *word *| *\\([^|]*?\\) *| *\\([^|]*?\\) *| *\\([1-9]\\) *|" "| word | \\1 | \\2 | 000\\3 |")
          
          ;; normalisation à 4 chiffres des n° strong à deux chiffres
       ;   (goto-char (point-min))
        ;  (replace-regexp "^| *word *| *\\([^|]*?\\) *| *\\([^|]*?\\) *| *\\([1-9][0-9]\\) *|" "| word | \\1 | \\2 | 00\\3 |")
          
          ;; normalisation à 4 chiffres des n° strong à 3 chiffres
         ; (goto-char (point-min))
         ; (replace-regexp "^| word *| *\\([^|]*?\\) *| *\\([^|]*?\\) *| *\\([1-9][0-9][0-9]\\) *|" "| word | \\1 | \\2 | 0\\3 |"))))
  
  )
#+END_SRC

#+RESULTS: bibliotheque
: normalize-strong-number


#+name: rebuild-phrases
#+BEGIN_SRC elisp
(normalize-strong-number "extract-sandbox")
#+END_SRC

#+RESULTS: rebuild-phrases
: 84088

#+tblname: extract-sandbox
| L_C:v    | NNNN | greek                |
| <8>      |  <4> | <20>                 |
| Mc       |      |                      |
| Mc_01    |      |                      |
|          |      |                      |
|          |      |                      |
|          |      |                      |
| Mc_01:01 |      |                      |
| Mc_01:01 |  746 | ΑΡΧΗ                 |
| Mc_01:01 | 3588 | τοῦ                  |
| Mc_01:01 | 2098 | εὐαγγελίου           |
| Mc_01:01 | 2424 | Ἰησοῦ                |
| Mc_01:01 | 5547 | Χριστοῦ              |
| Mc_01:01 | 5207 | [υἱοῦ                |
| Mc_01:01 | 2316 | θεοῦ]                |
| Mc_01:01 |      |                      |
| Mc_01:01 |      |                      |
| Mc_01:02 |      |                      |






** recherche des occurences

"^| word *| \\([^|]*?\\) *| \\([^|]*?\\) | \\([0-9]\\{4\\}\\)\\(.*\n\\)\\{1,100\\}| word *| \\([^|]*?\\) *| \\([^|]*?\\) | \\(\\3\\)"







* <¤START¤>texte de Mc 1 et Mc 2 ex "mark-1.htm"

#+tblname: book
